# Documentation for the format of this file can be found at https://docs.gitlab.com/ce/ci/yaml/README.html


image:
  name: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/risc-p-cores/risc-p-cores/dev:189fcc9e1cc7c41211ae67afb79fefd6083b3e15986d82ceaf175c108014be13
  entrypoint: [""]


# Global variables
variables:
  GIT_DEPTH: 1  # Shallow clone to only one depth for speed up
  GIT_SUBMODULE_STRATEGY: recursive  # See https://docs.gitlab.com/ce/ci/git_submodules.html
  SILENT: 0  # Causes make to print all commands it executes

# Commonly used YAML (anchors)
.define-anchors:
# refs:
  - &BRANCH_IS_MASTER /^master$/
  - &BRANCH_IS_BLACKHOLE /^black-hole.*$/

.notify-template: &notify-template
  stage: notify
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    UPDATE_REPO_POINTER: "True"
    SHA_UPDATE_REPO: "whisper"
    SHA_UPDATE_POINTER: $CI_COMMIT_SHA
    GIT_STRATEGY: none
    SKIP_BUILD: "True"
    ANCESTRY: $ANCESTRY
    ANCESTOR_COMMITS: $CI_COMMIT_TITLE # this is the previous HEAD, not the current branch? # why doesn't this need quotes

.pre-release-template: &pre-release-template
  stage: pre-release
  when: manual
  only:
    - master
  allow_failure: false
  variables:
    GIT_DEPTH: 0
  before_script:
    # gitlab has issues with GIT_DEPTH
    - git fetch --unshallow origin +refs/heads/*:refs/remotes/origin/*
  script:
    - git fetch origin $TARGET_BRANCH

    # generate list of commits in the push
    - COMMITS=$(git rev-list --reverse $CI_COMMIT_BEFORE_SHA..$CI_COMMIT_SHA)
    - echo "Commits to cherry-pick:"
    - echo "$COMMITS"

    - git checkout origin/"$TARGET_BRANCH"

    # cherry-pick commits
    - |
      set +e
      for COMMIT in $COMMITS; do
        echo "Cherry-picking commit $COMMIT ..."
        git cherry-pick -x "$COMMIT"
        if [ $? -ne 0 ]; then
          echo "❌ Cherry-pick failed for commit $COMMIT. Aborting."
          git cherry-pick --abort
          exit 1
        fi
      done
      set -e

    # push branch to origin
    - git push origin "$TARGET_BRANCH"

stages:
  - build
  - test
  - upload
  - notify
  - pre-release

build-job:
  stage: build
  script:
    - CC=clang CXX=clang++ make SOFT_FLOAT=1 STATIC_LINK=0 LZ4_COMPRESS=1 -j32
    - CC=clang CXX=clang++ make -C trace-reader TraceReader.a
  artifacts:
    paths:
      - build-Linux/whisper
    expire_in: 8 hours

lint-job:
  stage: test
  allow_failure: true
  script:
    - find .  \( -name '*.cpp' -o -name '*.hpp' \) ! -name "py-bindings.cpp" ! -name "Args.cpp" | xargs -P 8 -I{} sh -c "echo 'Dumping clang-tidy output for {} to {}.clang-tidy.log'; clang-tidy {} --quiet -- -std=c++20 -Ipci -Ipci/virtio -Iiommu -Ivirtual_memory -Iaplic -Iimsic -Ithird_party -I. -Ithird_party/softfloat/source/include -Itrace-reader &> {}.clang-tidy.log"
    - find . -name "*.clang-tidy.log" -exec cat {} \; | $(! grep -q ": warning:")

riscof-job:
  stage: test
  dependencies:
    - "build-job"
  script:
    - mkdir testing/riscof
    - cd testing/riscof
    # Install riscof
    - python3 -m venv virtualenv
    - source virtualenv/bin/activate
    - pip3 install riscof
    - riscof arch-test --clone
    - riscof setup --dutname whisper --refname spike
    - rm -rf ./whisper
    # Update riscof's config.ini file to point to the arch_test_target folder
    - sed -i 's/testing\/riscof\/whisper/arch_test_target/g' config.ini
    # Configure 8 parallel jobs when running whisper and spike
    - sed -i '/target_run=1/a jobs=8' config.ini
    - sed -i '/pluginpath=.*spike/a jobs=8' config.ini
    # Disable runing objdump before when running spike
    - sed -i -E 's/(\s+)(.*ref.disass.*)/\1# \2/g' spike/riscof_spike.py
    # Add --misaligned flag, enable generating signature file, and set target file name when running spike
    - sed -i -E "s/(execute \+= self.ref_exe \+).*/\1 ' --isa={2} --misaligned +signature={0} +signature-granularity=4 {1}'.format(sig_file, elf, self.isa)/g" spike/riscof_spike.py
    # Get the isa population code from whisper's plugin and use it in spike's plugin
    - sed -n -Ee '/self.isa =/,/self.compile_cmd =/ { s/( {4,})/  \1/g ; p }' ../../arch_test_target/riscof_whisper.py > isa_py.txt
    - sed -i -e '/self.isa =/,/^$/ {' -e '/self.isa =/r isa_py.txt' -e 'd }' spike/riscof_spike.py
    # Up the timeout time
    - sed -i 's/make.execute_all(self.work_dir)/make.execute_all(self.work_dir, timeout=900)/' spike/riscof_spike.py
    # Clone and build spike
    - git clone https://github.com/riscv-software-src/riscv-isa-sim
    - mkdir riscv-isa-sim/build
    - cd riscv-isa-sim/build
    - ../configure
    - make -s -j32
    - cd ../..
    # Run riscof
    - PATH=$PATH:$PWD/riscv-isa-sim/build:$PWD/../../build-Linux riscof --verbose debug run --suite riscv-arch-test/riscv-test-suite --env riscv-arch-test/riscv-test-suite/env --no-browser
  timeout: 6 hours


linux-boot-job:
  stage: test
  dependencies:
    - "build-job"
  script:
    # - DEBIAN_FRONTEND=noninteractive apt --yes install zip curl xz-utils
    - curl --location --output opensbi.zip --location "https://yyz-gitlab.local.tenstorrent.com/api/v4/projects/415/jobs/artifacts/tt-master/download?job=build_payload_zebu_linux_hello_world:%20\[8\]"
    - unzip opensbi.zip
    - build-Linux/whisper --tohost 0x70000008 --fromhost 0x70000000 --configfile whisper.json --memorysize 0xc0000000 fw_payload-8c.elf --hart 8 --quitany 2>&1 | tee output.log
    - grep -q "Halt and catch fire!" output.log
  timeout: 2 hours

kvm-boot-job:
  stage: test
  dependencies:
    - "build-job"
  script:
    - curl --location --output opensbi.zip --location "https://yyz-gitlab.local.tenstorrent.com/api/v4/projects/415/jobs/artifacts/tt-master/download?job=build_payload_zebu_kvm_linux_hello_world:%20\[2\]"
    - unzip opensbi.zip
    - build-Linux/whisper --tohost 0x70000008 --fromhost 0x70000000 --configfile whisper.json --memorysize 0xc0000000 fw_payload-2c.elf --hart 2 --quitany 2>&1 | tee output.log
    - grep -q "Halt and catch fire!" output.log
  timeout: 2 hours

snapshot-job:
  stage: test
  dependencies:
    - "build-job"
  script:
    - curl --location --output rvsw-tools.zip "https://yyz-gitlab.local.tenstorrent.com/api/v4/projects/665/jobs/artifacts/main/download?job=package_tools"
    - unzip rvsw-tools.zip && tar -xvf rvsw-tools.tar.xz
    - curl --location --output build_snapshots.zip ""https://yyz-gitlab.local.tenstorrent.com/api/v4/projects/906/jobs/artifacts/main/download?job=build_snapshots""
    - unzip build_snapshots.zip
    - rvsw-tools/wb --no-cpubind -n=3 --whisper ./build-Linux/whisper --sbi rvsw-snapshots/fw_jump.elf --kernel rvsw-snapshots/Image --initrd rvsw-snapshots/sysbench.cpio --platform ascalon-rtl --append 'init=mini-init trigger="Threads started!" command="sysbench memory --threads=3 --memory-block-size=1M --memory-scope=global --memory-oper=read --memory-access-mode=seq --memory-total-size=16M run"' -- --hintops --snapshotdir sysbench_memory_3c_3t_1M_global_read_seq_16M_snapshot
    - rvsw-tools/wb --sbi /dev/null --kernel /dev/null --smp 3 --platform ascalon-rtl --json > whisper.json
    - build-Linux/whisper --tohost 0x70000008 --fromhost 0x70000000 --configfile whisper.json --harts 3 --quitany --loadfrom sysbench_memory_3c_3t_1M_global_read_seq_16M_snapshot0 | tee output.log
    - grep -q "Throughput:" output.log
    - grep -q "Command(s) completed, halting." output.log
    - grep -q "System halted" output.log
    - rvsw-tools/wb --no-cpubind -n=1 --whisper ./build-Linux/whisper --sbi rvsw-snapshots/fw_jump.elf --kernel rvsw-snapshots/Image --initrd rvsw-snapshots/rvv-bench/rvv-bench.cpio --platform ascalon-rtl --append 'init=mini-init command="bin/linux/instructions/scalar/scalar" trigger_immediate=true' -- --hintops --snapshotdir rvvbench_bin-linux-instructions-scalar-scalar_snapshot
    - rvsw-tools/wb --sbi /dev/null --kernel /dev/null --platform ascalon-rtl --json > whisper.json
    - build-Linux/whisper --tohost 0x70000008 --fromhost 0x70000000 --configfile whisper.json --harts 1 --loadfrom rvvbench_bin-linux-instructions-scalar-scalar_snapshot0 | tee output.log
    - grep -q 'add t0, t1, t2' output.log
    - grep -q 'fmadd.d ft0, ft1, ft2, ft3' output.log
    - grep -q 'bseti t0, t1, 13' output.log
    - grep -q 'Command(s) completed, halting.' output.log
    - grep -q 'System halted' output.log

notify_riscv_cluster:
  stage: notify
  rules:
    # https://tenstorrent.atlassian.net/wiki/spaces/RVRTLDV/pages/1421574263/Ascalon+-+Dependency+Freeze+Plan
    - if: '$CI_COMMIT_BRANCH =~ /^ascalon\/ea\/a0/ && $CI_PIPELINE_SOURCE == "push"'
  variables:
    UPDATE_REPO_POINTER: "True"
    SHA_UPDATE_REPO: "whisper"
    SHA_UPDATE_POINTER: $CI_COMMIT_SHA
    GIT_STRATEGY: none
    SKIP_BUILD: "True"
    ANCESTRY: $ANCESTRY
    ANCESTOR_COMMITS: $CI_COMMIT_TITLE # this is the previous HEAD, not the current branch? # why doesn't this need quotes
    UPDATE_DIRECTORY: risc-p-cores
    UPDATE_TARGET_BRANCH: ascalon/work/core
  trigger:
      project: riscv/riscv_cluster
      branch: ascalon/work/core

notify-riescue:
  <<: *notify-template
  trigger:
    project: riscv/riescue

# notify-archcov:
#   <<: *notify-template
#   trigger:
#     project: riscv/dv/corearchcoverage

# notify-rv-tester:
#   <<: *notify-template
#   trigger:
#     project: riscv/dv/rv_tester



upload-release:
  stage: upload
  dependencies:
    - "build-job"
  script:
    - bash upload/upload.sh
  only:
    - tags

pre-release-ascalon:
  <<: *pre-release-template
  variables:
    TARGET_BRANCH: "pre-release-ascalon"

.post-commit-test: # Maybe re-enable this at some point in the future
  stage: test
  allow_failure: false
  script:
    - cd testing && source init_venv.sh && ralph trace -t configs.py --clean
  artifacts: &TEST_ARTIFACTS
    when: always
    expire_in: 8 hours
    paths:
    - "test_output/*/*"

